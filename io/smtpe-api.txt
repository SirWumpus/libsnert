SMTP Engine Call-Backs
----------------------

When smtpe first starts, it creates a master Lua state (interpreter) and
loads and executes ``/etc/smtpe.lua'' (see option script). If the script
is missing, or there is a syntax or memory error, then smtpe will fail
to start.

When an SMTP client connects, a new Lua thread is created from the
master Lua state. The each Lua hook back into smtpe is optional, ie.
doesn't need to be defined.


Global SMTP Engine Variables
----------------------------

smtpe.bin_version


smtpe.api_version


smtpe.copyright


smtpe.host


Client SMTP Variables
---------------------

client.address

	Available from hook.accept to hook.close

client.port

	Available from hook.accept to hook.close

client.host

	Available from hook.accept to hook.close

client.id_sess

	Session ID available from hook.accept to hook.close

client.id_trans

	Transaction ID available from hook.mail to hook.forward;
	discarded by RSET, HELO, EHLO, or end of transaction.

client.msg_file

	Available from hook.mail to hook.forward; discarded by RSET,
	HELO, EHLO, or end of transaction.

client.input

	Available in each SMTP command related hook (HELO, EHLO, AUTH,
	MAIL, RCPT, DATA, QUIT, RSET, NOOP, HELP, XCLIENT, unknown, error).

client.is_pipelining

	True when the client has been detected pipelining SMTP commands.


Client SMTP Input Hooks
-----------------------

A hook can return either a correctly formatted SMTP (multi-line) reply
with CRLF newline or no reply. If no reply message is returned, or there
is an error, then a default reply is sent back to the client. Undefined
hooks are ignored.

A hook can optionally return a boolean before the reply. When true the
SMTP client connection will be dropped after the reply has been written
back to the client.

[drop_flag,] reply = hook.accept(ip, ptr)

	ip = client.address; ptr = client.host

[drop_flag,] reply = hook.helo(helo_arg)


[drop_flag,] reply = hook.ehlo(helo_arg)


[drop_flag,] reply = hook.auth(auth_arg)

	Should return 235 for successful authentication.

[drop_flag,] reply = hook.unknown(smtp_input)

	Should always return 502 command unknown.

[drop_flag,] reply = hook.mail(sender)


[drop_flag,] reply = hook.rcpt(recipient)


[drop_flag,] reply = hook.data()

	Should return "354 text" to continue, "4xy text", or "5xy text".

hook.content(chunk_of_lines_as_a_string)


hook.header(header_line)


hook.eoh()


hook.body(body_line)


[drop_flag,] reply = hook.dot(spool_file_path)

	A negative reply will skip forwarding of the message. No reply
	or a positive reply will continue and forward the message. The
	possitive reply is held until the result of forwarding is known.
	hook.forward() may override the reply with its own positive or
	negative reply.

[drop_flag,] reply = hook.forward(spool_file_path)

	If no reply or a Lua error, then the smtp-smart-host option, if
	defined is used to forward the message. A positive or negative
	reply will skip smtp-smart-host forwarding.

hook.reset()

	Invoked for RSET, HELO, EHLO, and end of message (DOT).

[drop_flag,] reply = hook.rset()

	Should always return 250 OK.

[drop_flag,] reply = hook.noop()

	Should always return 250 OK.

[drop_flag,] reply = hook.help()

	Should always return 214 text.

[drop_flag,] reply = hook.quit()

	Should always return 221 text.

[drop_flag,] reply = hook.xclient()

	A negative reply will prevent the XCLIENT command from being
	applied.

hook.error(errno, errno_text)


hook.close()

	End of SMTP connection and clean-up.


DNS Support Functions
---------------------

	Constants

		dns.class.IN
		dns.class.CS
		dns.class.CH
		dns.class.HS

		dns.type.A
		dns.type.AAAA
		dns.type.CNAME
		dns.type.DNAME
		dns.type.MX
		dns.type.NS
		dns.type.SOA
		dns.type.TXT

		dns.rcode.OK
		dns.rcode.NOERROR
		dns.rcode.FORMAT
		dns.rcode.SERVFAIL
		dns.rcode.NXDOMAIN
		dns.rcode.NOT_IMPLEMENTED
		dns.rcode.REFUSED
		dns.rcode.ERRNO
		dns.rcode.TIMEOUT

	Functions

dns.open()

	Opens a DNS socket for the duration of a hook handler. There is
	no dns.close(). When a Lua hook completes the DNS socket and
	related data will be recovered.

dns.close()


dns.reset()

	Reset socket timeout and clears any previous collected answers.

dns.query(dns.class, dns.type, name)

	Send a DNS query. This can be done multiple times before collecting
	the results with dns.wait().

boolean = dns.ispending()

	Return true if there are still queries pending.

answers = dns.wait(for_all_flag)

	Wait for one or more pending DNS queries to complete. If for_all_flag
	is true, then wait for all pending queries; otherwise return as soon
	what ever queries have completed.

	Return an answer array containing the queries and their results. If
	an error occured the answers array will be nil.

		answers = [query]
		query = { rcode, name, dns.class, dns.type, dns.ttl, answer = [RR], extra = [RR], authority = [RR] }

		RR formats for dns.type
		-----------------------

		A = { name, dns.class, dns.type, ttl, address }
		AAAA = { name, dns.class, dns.type, ttl, address }
		PTR = { address, dns.class, dns.type, ttl, name }
		CNAME = { name, dns.class, dns.type, ttl, host }
		DNAME = { name, dns.class, dns.type, ttl, host }
		MX = { name, dns.class, dns.type, ttl, host, preference }
		NS = { name, dns.class, dns.type, ttl, host }
		SOA = { name, dns.class, dns.type, ttl, mname, rname, serial, refresh, retry, expire, minimum, }
		TXT = { name, dns.class, dns.type, ttl, text }


string = dns.classname(dns.class)


string = dns.typename(dns.type)


string = dns.rcodename(dns.rcode)


Network Support Functions
-------------------------

string = net.reverseip(address, arpa_suffix_flag)


Syslog Functions
----------------

syslog.open(ident, options, facility)

	Typically not required since the logging will have been setup
	by the application.

	Or-able option flags:

		syslog.LOG_PID
		syslog.LOG_CONS
		syslog.LOG_ODELAY
		syslog.LOG_NDELAY
		syslog.LOG_NOWAIT
		syslog.LOG_PERROR

	Choice of facility:

		syslog.LOG_KERN
		syslog.LOG_USER
		syslog.LOG_MAIL
		syslog.LOG_DAEMON
		syslog.LOG_AUTH
		syslog.LOG_SYSLOG
		syslog.LOG_LPR
		syslog.LOG_NEWS
		syslog.LOG_UUCP
		syslog.LOG_CRON
		syslog.LOG_AUTHPRIV
		syslog.LOG_FTP
		syslog.LOG_LOCAL0
		syslog.LOG_LOCAL1
		syslog.LOG_LOCAL2
		syslog.LOG_LOCAL3
		syslog.LOG_LOCAL4
		syslog.LOG_LOCAL5
		syslog.LOG_LOCAL6
		syslog.LOG_LOCAL7

syslog.log(level, message)

	Possible log levels:

		syslog.LOG_EMERG
		syslog.LOG_ALERT
		syslog.LOG_CRIT
		syslog.LOG_ERR
		syslog.LOG_WARNING
		syslog.LOG_NOTICE
		syslog.LOG_INFO
		syslog.LOG_DEBUG

syslog.error(message)

	Equivalent to

		syslog.log(syslog.LOG_ERR, message)

syslog.info(message)

	Equivalent to

		syslog.log(syslog.LOG_INFO, message)

syslog.debug(message)

	Equivalent to

		syslog.log(syslog.LOG_DEBUG, message)

syslog.close()

	Typically not required since the logging will be closed
	by the application.


MD5 Functions
-------------

md5_obj = md5.new()


md5_obj:append(string)


digest = md5_obj:end()


MIME Message Table
------------------

This table is created when a transaction starts with MAIL and is discard
by RSET, HELO, EHLO, or at the end of message when the transaction
completes.

mime.parts

	An array of message MIME parts in linear order of appearance.
	The top level message headers start with mime.parts[1]. The
	number of mime parts is given by "# mime.parts".

mime.parts[i].md5_encoded

	The MD5 of the MIME part body encoded.

mime.parts[i].md5_decoded

	The MD5 of the MIME part body after decoding the body based on
	Content-Transfer-Encoding

mime.parts[i].part_length

	The length of the MIME part, bother headers and body.

mime.parts[i].body_length

	The encoded length of the MIME part body.

mime.parts[i].content_type

	A copy of the Content-Type header.

mime.parts[i].content_transfer_encoding

	A copy of the Content-Transfer-Encoding header.


URI Array
---------

This table is created when a transaction starts with MAIL and is
discard by RSET, HELO, EHLO, or at the end of message when the
transaction completes.

uri

	An array of unique uri entries. The number of entries given by
	"# uri"

uri[i] = md5_key

	For each URI found, the uri_raw field is converted to an MD5 and
	used as a key by which to save the URI. The MD5 is added to the
	table, primarily so that the Lua length operator, #, works. By
	using the MD5 of the uri_raw as a key, it allows for an
	existance so as to avoid duplicate entries.

uri[md5_key].uri_raw
uri[md5_key].uri_decoded
uri[md5_key].scheme
uri[md5_key].scheme_info
uri[md5_key].user_info
uri[md5_key].host
uri[md5_key].port
uri[md5_key].query
uri[md5_key].fragment

	To walk through the table:

		for k,v in pairs(uri) do
			if type(k) ~= "number" then
				-- operate on uri[k]
			end
		end


SMTP Client
-----------

	Constants

		--
		-- RFC 821, 2821, 5321 codes.
		--
		smtp.code.STATUS
		smtp.code.HELP
		smtp.code.WELCOME
		smtp.code.GOODBYE
		smtp.code.AUTH_OK		-- RFC 4954 section 6
		smtp.code.OK
		smtp.code.USER_NOT_LOCAL

		smtp.code.WAITING

		smtp.code.CLOSING
		smtp.code.AUTH_MECHANISM	-- RFC 4954 section 6
		smtp.code.BUSY
		smtp.code.TRY_AGAIN_LATER
		smtp.code.NO_STORAGE
		smtp.code.AUTH_TEMP		-- RFC 4954 section 6

		smtp.code.BAD_SYNTAX
		smtp.code.BAD_ARGUMENTS
		smtp.code.UNKNOWN_COMMAND
		smtp.code.BAD_SEQUENCE
		smtp.code.UNKNOWN_PARAM
		smtp.code.AUTH_REQUIRED		-- RFC 4954 section 6
		smtp.code.AUTH_WEAK		-- RFC 4954 section 6
		smtp.code.AUTH_FAIL		-- RFC 4954 section 6
		smtp.code.AUTH_ENCRYPT		-- RFC 4954 section 6
		smtp.code.REJECT
		smtp.code.UNKNOWN_USER
		smtp.code.OVER_QUOTA
		smtp.code.BAD_ADDRESS
		smtp.code.TRANSACTION_FAILED

		--
		-- Error conditions indicated SMTP like codes.
		--
		smtp.code.ERROR
		smtp.code.ERROR_CONNECT
		smtp.code.ERROR_TIMEOUT
		smtp.code.ERROR_EOF
		smtp.code.ERROR_IO

	Functions

smtp.code, n_rcpt_ok = smtp.sendfile(host, mail, rcpts[], spool)

	Send the spool file to host, which can be a host name, ipv4, or
	ipv6 address with optional colon port suffix, eg.
	[2001:0Db8::1]:2525. Specify the mail address and an array of
	one or more recipents. The smtp.code return is the last read.
	The number of successful recipients accepted is returned. The
	spool file can be nil, in which case the function ends after the
	last RCPT command and before DATA.


smtp.code, n_rcpt_ok = smtp.sendstring(host, mail, rcpts[], message)
