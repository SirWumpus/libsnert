#
# @package_copyright@
#
# @configure_input@
#

.POSIX :

.SUFFIXES :
A = .@LIBEXT@
O = .@OBJEXT@
E = @EXEEXT@
.SUFFIXES : .txt .c .i $O $A

#
# Paths for supporting headers and libraries.
#
top_srcdir = @top_srcdir@
abs_srcdir = @abs_srcdir@
SNERT_TARDIR	= @snert_tardir@
SNERT_INCDIR	= @snert_incdir@
SNERT_LIBDIR	= @snert_libdir@

prefix = @prefix@
exec_prefix = @exec_prefix@
bindir = @bindir@

LIB	= $(SNERT_LIBDIR)/@PACKAGE_TARNAME@$A
BAK	= $(SNERT_LIBDIR)/@PACKAGE_TARNAME@.bak
TGZ	= $(SNERT_TARDIR)/@PACKAGE_TARNAME@-@PACKAGE_VERSION@.tgz

CC		= @CC@
CC_E	= @CC_E@
CC_O	= @CC_O@
CFLAGS	= ${CFLAGS_PREFIX} @CFLAGS@
LDFLAGS	= ${LDFLAGS_PREFIX} @LDFLAGS@
LIBS	= ${LIBS_PREFIX} @LIBS@


XARGSI	= @XARGSI@
RANLIB	= @RANLIB@
ARCHIVE	= @ARCHIVE@
COMPILE	= @COMPILE@

LIBSNERT = @LIBSNERT@

LIB_RT		= @HAVE_LIB_RT@
LIB_WS2_32	= @HAVE_LIB_WS2_32@
LIB_IPHLPAPI	= @HAVE_LIB_IPHLPAPI@

LIB_DB		= @HAVE_LIB_DB@
CFLAGS_DB	= @CFLAGS_DB@
LDFLAGS_DB	= @LDFLAGS_DB@

LIB_MILTER	= @HAVE_LIB_MILTER@
CFLAGS_MILTER	= @CFLAGS_MILTER@
LDFLAGS_MILTER	= @LDFLAGS_MILTER@

LIB_PTHREAD	= @HAVE_LIB_PTHREAD@
CFLAGS_PTHREAD	= @CFLAGS_PTHREAD@
LDFLAGS_PTHREAD	= @LDFLAGS_PTHREAD@

LIB_SQLITE3	= @HAVE_LIB_SQLITE3@
CFLAGS_SQLITE3	= @CFLAGS_SQLITE3@
LDFLAGS_SQLITE3	= @LDFLAGS_SQLITE3@

#######################################################################

#%$O : %.c
.c$O :
	$(COMPILE)

#(%) : %
#	$(ARCHIVE)$*

#%$E : %.c
.c$E :
	$(CC) $(CFLAGS) $(LDFLAGS) $(CC_E)$*$E $< $(LIBSNERT) $(LIBS)

#%$E : %$O
$O$E :
	$(LD) $(LDFLAGS) $(CC_E)$*$E $*$O $(LIBSNERT) $(LIBS)

.c.i:
	${CC} -E ${CFLAGS_SQLITE3} ${CFLAGS_MILTER} ${CFLAGS} $*.c >$*.i

#######################################################################

OBJS =  grey$O tlds$O MailSpan$O parsePath$O mime$O siq$O spf$O smdb$O \
	smtp2$O mfReply$O smf$O

.MAIN : build

all : build

title :
	@echo
	@echo '***************************************************************'
	@echo '==> '${abs_srcdir}
	@echo '***************************************************************'
	@echo

build: title $(LIB) add-lib

install: build
	-cp -p mime$E smtp2$E spf$E ${bindir}

$(LIB):	$(OBJS)

add-lib:
	@echo
	ar rc ${LIB} ${OBJS}
	$(RANLIB) $(LIB)
	@echo

#add-lib:
#	@echo
#	for obj in $(OBJS); do $(ARCHIVE); done
#	$(RANLIB) $(LIB)
#	@echo

clean : title
	-rm -f *.o *.obj *.i *.map *.tds *.TR2 *.stackdump core *.core core.* *.log
	-rm -f parsePath$E smdb$E smtp$E smtp2$E spf$E siq$E tlds$E digestbl$E mime$E
	-rm -f tlds-alpha-by-domain.c two-level-tlds.c

distclean: clean
	-rm makefile

${top_srcdir}/util/DebugMalloc.o : ${top_srcdir}/util/DebugMalloc.c
	cd ${top_srcdir}/util ; make DebugMalloc.o

debug : ${top_srcdir}/util/DebugMalloc.o
	make CFLAGS_PREFIX='-I${top_srcdir}' LIBS_PREFIX='${top_srcdir}/util/DebugMalloc.o' build

backup-tlds:
	-mv two-level-tlds.txt two-level-tlds.txt.bak
	-mv tlds-alpha-by-domain.txt tlds-alpha-by-domain.txt.bak

update-tlds: backup-tlds tlds-alpha-by-domain.txt two-level-tlds.txt

tlds-alpha-by-domain.txt:
	wget -r -O tlds-alpha-by-domain.txt http://data.iana.org/TLD/tlds-alpha-by-domain.txt

tlds-alpha-by-domain.c : tlds.sed tlds-alpha-by-domain.txt
	sed -f tlds.sed tlds-alpha-by-domain.txt >tlds-alpha-by-domain.c

#http://www.surbl.org/tld/two-level-tlds
two-level-tlds.txt:
	wget -r -O two-level-tlds.txt http://spamcheck.freeapp.net/two-level-tlds

# Has a more detailed two-level TLD list, which I don't agree within many cases.
# http://svn.apache.org/repos/asf/spamassassin/trunk/lib/Mail/SpamAssassin/Util/RegistrarBoundaries.pm

# Alex Broens maintains
# http://www.rulesemporium.com/rules/90_2tld.cf

# There is also the URIBL hosters list
# http://rss.uribl.com/hosters/hosters.txt

two-level-tlds.c : tlds.sed two-level-tlds.txt
	sed -e '/^#/d' -e '/[^A-Za-z0-9.-]/d' -e 's/.*/"&",/' two-level-tlds.txt >two-level-tlds.c

tlds$O : tlds-alpha-by-domain.c two-level-tlds.c tlds.c
	$(CC) $(CFLAGS) -c tlds.c

lint: title
	-splint -D_REENTRANT -U__WIN32__ -I${SNERT_INCDIR} +posixlib +boolint *.c

../sys/gmtime_r$O: ../sys/gmtime_r.c

parsePath$E :  ../sys/gmtime_r$O MailSpan.c parsePath.c
	${WRAPPER} $(CC) -DTEST $(CFLAGS) $(LDFLAGS) $(CC_E)parsePath$E parsePath.c MailSpan.c $(LIBSNERT) $(LIBS)

# This cannot be built until AFTER the lib/io routines have been built.
smtp2$E : ../net/pdq$O ../io/socket2$O smtp2.c
	${WRAPPER} $(CC) -DTEST $(CFLAGS) $(LDFLAGS) $(CC_E)smtp2$E smtp2.c $(LIBSNERT) $(LIBS) ${LIB_PTHREAD} ${LIB_WS2_32} ${LIB_IPHLPAPI} ${LIB_RT}

# This cannot be built until AFTER the lib/io routines have been built.
spf$E :  ../net/pdq$O spf.c
	${WRAPPER} $(CC) -DTEST $(CFLAGS) $(LDFLAGS) $(CC_E)spf$E spf.c $(LIBSNERT) $(LIBS) ${LIB_PTHREAD} ${LIB_WS2_32} ${LIB_IPHLPAPI} ${LIB_RT}

# This cannot be built until AFTER the lib/io routines have been built.
siq$E :  ../net/pdq$O siq.c
	${WRAPPER} $(CC) -DTEST $(CFLAGS) $(LDFLAGS) $(CC_E)siq$E siq.c $(LIBSNERT) $(LIBS) ${LIB_PTHREAD} ${LIB_WS2_32} ${LIB_IPHLPAPI} ${LIB_RT}

tlds$E : tlds-alpha-by-domain.c two-level-tlds.c tlds.c
	${WRAPPER} $(CC) -DTEST $(CFLAGS) $(LDFLAGS) $(CC_E)tlds$E tlds.c $(LIBSNERT) $(LIBS)

mime$E : mime.c
	${WRAPPER} $(CC) -DTEST $(CFLAGS) $(LDFLAGS) $(CC_E)mime$E mime.c $(LIBSNERT) $(LIBS)

# In order to test singleKey() and doubleKey() lookups.
smdb$E : smdb.c
	${WRAPPER} $(CC) -DTEST $(CFLAGS) $(LDFLAGS) $(CC_E)smdb$E smdb.c $(LIBSNERT) ${LIB_DB} ${LIB_SQLITE3} ${LIB_PTHREAD} ${LIB_RT} ${LIB_WS2_32} ${LIB_IPHLPAPI}

digestbl$E : digestbl.c
	${CC} -DTEST ${CFLAGS} ${LDFLAGS} $(CC_E)digestbl$E digestbl.c $(LIBSNERT) ${LIBS} ${LIB_PTHREAD} ${LIB_RT} ${LIB_WS2_32} ${LIB_IPHLPAPI}

mfReply$O : mfReply.c
	${CC} ${CFLAGS_MILTER} ${CFLAGS} -c $*.c

smf$O : smf.c
	${CC} ${CFLAGS_SQLITE3} ${CFLAGS_MILTER} ${CFLAGS} -c $*.c
