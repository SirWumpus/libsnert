/*
 * playfair.h
 *
 * http://en.wikipedia.org/wiki/Playfair_cipher
 *
 * Copyright 2010 by Anthony Howe. All rights reserved.
 */

#ifndef __playfair__
#define __playfair__	1

#ifdef __cplusplus
extern "C" {
#endif

/***********************************************************************
 ***
 ***********************************************************************/

typedef char (playfair_table)[37];

/**
 * @param fp
 *	A pointer to an output FILE stream.
 *
 * @param message
 *	A pointer to a C string to be written out as space separated
 *	digraphs.
 */
extern void playfair_print(FILE *fp, const char *message);

/**
 * @param fp
 *	A pointer to an output FILE stream.
 *
 * @param key_table
 *	A key table previously generated by playfair_build() to be
 *	written out as a 5x5 or 6x6 space separated grid.
 */
extern void playfair_dump(FILE *fp, const playfair_table key_table);

/**
 * @param alphabet
 *	Either a 25 or 36 alphabet. A classic Playfair 25 character
 * 	alphabet excludes either I or J (they are considered equivalent).
 *	A 36 character alphabet consists of all alpha and digits. The
 *	alphabet order does not have to be sequential.
 *
 * @param key
 *	The cipher key. Upto 25 or 36 characters will be used depending
 *	on the alphabet.
 *
 * @param key_table
 *	The generated key table based on the key and remaining alphabet.
 *
 * @return
 *	Zero on success.
 */
extern int playfair_build(const char *alphabet, const char *key, playfair_table key_table);

/**
 * @param key_table
 *	A key table previously generated by playfair_build().
 *
 * @param message
 *	A message string to encode.
 *
 * @return
 *	A pointer to an allocated C string containing the transformed
 *	message. It is the caller's responsiblity to free() this pointer.
 */
extern char *playfair_encode(const playfair_table key_table, const char *message);

/**
 * @param key_table
 *	A key table previously generated by playfair_build().
 *
 * @param message
 *	A message string to decode.
 *
 * @return
 *	A pointer to an allocated C string containing the transformed
 *	message. It is the caller's responsiblity to free() this pointer.
 */
extern char *playfair_decode(const playfair_table key_table, const char *message);

/***********************************************************************
 ***
 ***********************************************************************/

#ifdef  __cplusplus
}
#endif

#endif /* __playfair__ */

