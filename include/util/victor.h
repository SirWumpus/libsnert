/*
 * victor.h
 *
 * http://en.wikipedia.org/wiki/VIC_cipher
 *
 * Copyright 2010 by Anthony Howe. All rights reserved.
 */

#ifndef __victor__
#define __victor__	1

#ifdef __cplusplus
extern "C" {
#endif

/***********************************************************************
 ***
 ***********************************************************************/

typedef char (victor_table)[3][38];

/**
 * @param fp
 *	A pointer to an output FILE stream.
 *
 * @param key_table
 *	A key table previously generated by victor_build() to be
 *	written out as a 5x5 or 6x6 space separated grid.
 */
extern void victor_dump(FILE *fp, victor_table key_table);

/**
 * @param key
 *	A cipher key string upto 36 alpha-numeric characters.
 *
 * @param frequent
 *	Typically a string of the seven most frequent English letters
 *	interspersed with three non alpha-numeric characters. An example
 *	of the seven most common English letters used is "ES.TO.NI.A".
 *
 * @param key_table
 *	The generated key table based on the key and remaining alphabet.
 *
 * @return
 *	Zero on success.
 */
extern int victor_build(const char *key, const char *frequent, victor_table key_table);

/**
 * @param key_table
 *	A key table previously generated by victor_build().
 *
 * @param key_mask
 *	A C string of digits used in non-carrying addition to mask an
 *	intermediate result before conversion back to alpha-numerics.
 *
 * @param message
 *	A message string to encode.
 *
 * @return
 *	A pointer to an allocated C string containing the transformed
 *	message. It is the caller's responsiblity to free() this pointer.
 */
extern char *victor_encode(victor_table key_table, const char *key_mask, const char *message);

/**
 * @param key_table
 *	A key table previously generated by victor_build().
 *
 * @param key_mask
 *	A C string of digits used in non-carrying addition to mask an
 *	intermediate result before conversion back to alpha-numerics.
 *
 * @param message
 *	A message string to encode.
 *
 * @return
 *	A pointer to an allocated C string containing the transformed
 *	message. It is the caller's responsiblity to free() this pointer.
 */
extern char *victor_decode(victor_table key_table, const char *key_mask, const char *message);

/***********************************************************************
 ***
 ***********************************************************************/

#ifdef  __cplusplus
}
#endif

#endif /* __victor__ */

